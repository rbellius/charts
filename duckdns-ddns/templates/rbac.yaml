apiVersion: v1
kind: ServiceAccount
metadata:
  name: service-reader-sa
  namespace: '{{ .Release.Namespace }}'
  annotations:
    argocd.argoproj.io/instance: duckdns-ddns
  # labels:
  #   app.kubernetes.io/component: service-account
  #   app.kubernetes.io/instance:  duckdns-ddns
  #   app.kubernetes.io/name: duckdns-ddns-service-account
    # app.kubernetes.io/part-of: duckdns-ddns
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: service-reader
  namespace: '{{ .Release.Namespace }}'
  annotations:
    argocd.argoproj.io/instance: duckdns-ddns
  # labels:
  #   app.kubernetes.io/component: cluster-role
  #   app.kubernetes.io/instance:  duckdns-ddns
  #   app.kubernetes.io/name: duckdns-ddns-cluster-role
  #   app.kubernetes.io/part-of: duckdns-ddns
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["services"]
  verbs: ["get", "watch", "list"]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: duckdns-ddns-rbac
  namespace: '{{ .Release.Namespace }}'
  annotations:
    argocd.argoproj.io/instance: duckdns-ddns
  # labels:
  #   app.kubernetes.io/component: cluster-role-binding
  #   app.kubernetes.io/instance:  duckdns-ddns
  #   app.kubernetes.io/name: duckdns-ddns-cluster-role-binding
  #   app.kubernetes.io/part-of: duckdns-ddns
subjects:
  - kind: ServiceAccount
    # Reference to upper's `metadata.name`
    name: service-reader-sa
    # Reference to upper's `metadata.namespace`
    namespace: '{{ .Release.Namespace }}'
roleRef:
  kind: ClusterRole
  name: service-reader
  apiGroup: rbac.authorization.k8s.io